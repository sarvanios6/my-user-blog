{"version":3,"sources":["component/Login/LoginForm.js","component/Login/Login.js","App.js","reportWebVitals.js","index.js"],"names":["patterEmail","LoginForm","props","resetForm","formRef","current","resetValidationState","handleChange","target","value","name","setState","match","fetching","fetch","then","res","json","result","userData","find","email","toLowerCase","password","username","error","handleSubmit","e","formData","inputs","preventDefault","localStorage","setItem","history","push","pathname","state","handleErrorSubmit","errorInputs","console","React","createRef","this","ref","onSubmit","onErrorSubmit","FormGroup","Form","Label","id","required","pattern","validator","errorMessage","onChange","Text","className","readOnly","Row","Spinner","animation","variant","Button","type","Component","Login","useHistory","Container","Col","md","Card","Body","PATHS","App","exact","path","component","login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a92f921.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {TextInput, ValidationForm} from 'react-bootstrap4-form-validation'\nimport {Button, Form, FormGroup, Spinner} from 'react-bootstrap'\n\nconst patterEmail = '[A-Za-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,}$'\n\nclass LoginForm extends Component {\n    constructor(props){\n        super(props)\n        this.formRef = React.createRef()\n        this.state = {\n            email: '',\n            password: '',\n            fetching: false,\n            error: null,\n            result: []\n        }\n    }\n    resetForm = () => {\n        let formRef = this.formRef.current;\n        formRef.resetValidationState(false)\n    }\n    handleChange = ({target:{value, name}}) => {\n        this.setState({\n            [name]: value,\n            password: name === 'email' && null,\n        })\n        if (value.match(patterEmail)) {\n            this.setState({\n                fetching: true\n            })\n            fetch('https://jsonplaceholder.typicode.com/users')\n                .then(res => res.json())\n                .then((result) => {\n\n                        const userData = result.find(({email}) => email.toLowerCase() === value.toLowerCase())\n                        userData && this.resetForm()\n                        this.setState({\n                            fetching: false,\n                            result,\n                            password: userData ? userData.username : null\n                        })\n                    },\n                    (error) => {\n                        this.setState({\n                            fetching: false,\n                            password: null,\n                            error\n                        })\n                    }\n                )\n        }\n    }\n\n    handleSubmit = (e, formData, inputs) => {\n        e.preventDefault();\n        localStorage.setItem('formData', formData)\n        this.props.history.push({pathname: '/home',\n            state: { result: this.state.result }\n        })\n    }\n\n    handleErrorSubmit = (e, formData, errorInputs) => {\n        console.error(errorInputs)\n    }\n\n    render() {\n        const {email, password, fetching} = this.state\n        return (\n            <ValidationForm ref={this.formRef} onSubmit={this.handleSubmit} onErrorSubmit={this.handleErrorSubmit}>\n                <FormGroup>\n                    <Form.Label>Email</Form.Label>\n                    <TextInput name=\"email\" id=\"email\" required\n                               value={email}\n                               pattern={patterEmail}\n                               validator={() => (password !== null)}\n                               errorMessage={{\n                                    required: \"Email id is required\",\n                                    pattern: \"Please enter a valid email\",\n                                    validator: \"Entered email id not in the list\"\n                                }}\n                               onChange={this.handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">\n                        We'll never share your email with anyone else.\n                    </Form.Text>\n\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>Password</Form.Label>\n                    <TextInput name=\"password\" id=\"password\" required\n                               readOnly\n                               value={password}\n                               onChange={this.handleChange}\n                    />\n                </FormGroup>\n                <Form.Row>\n                    {fetching && <Spinner animation=\"border\" variant=\"primary\" />}\n                    {!fetching && <Button type='submit' className=\"login-button\">Login</Button>}\n                </Form.Row>\n            </ValidationForm>\n        )\n    }\n}\n\nexport default LoginForm;\n","import React from 'react'\nimport {Col, Container, Row, Card} from 'react-bootstrap'\nimport LoginForm from './LoginForm'\nimport './Login.css'\nimport { useHistory } from 'react-router-dom'\n\nconst Login = () => {\n    const history = useHistory()\n return (\n     <div className=\"fixed-background\">\n         <Container>\n             <Row className=\"card-center \">\n                 <Col md={7}>\n                     <div className=\"card imageaside\">\n                         <div className=\"card-horizontal \">\n                             <Card.Body>\n                                 <LoginForm history={history} />\n                             </Card.Body>\n                         </div>\n                     </div>\n                 </Col>\n             </Row>\n         </Container>\n     </div>\n )\n}\nexport default Login","import React from 'react';\nimport {HashRouter as Router, Route} from \"react-router-dom\"\nimport login from './component/Login/Login'\n// import home from './component/Home/Home'\n// import blogs from './component/Blogs/Blogs'\n// import blogsDetails from './component/Blogs/BlogsDetails'\n// import users from './component/Users/Users'\n\nexport const PATHS = {\n  DASHBOARD: '/',\n  HOME: '/home',\n  LOGIN: '/Login',\n  USERS: '/users',\n  BLOGS: '/blogs',\n  BLOGS_ID: '/blogs/:id'\n};\nconst App = () => (\n    <Router>\n        <Route exact path={PATHS.DASHBOARD} component={login}/>\n        <Route path={PATHS.LOGIN} component={login}/>\n        {/*<Route exact path={PATHS.HOME} component={home}/>*/}\n        {/*<Route exact path={PATHS.USERS} component={users}/>*/}\n        {/*<Route exact path={PATHS.BLOGS} component={blogs}/>*/}\n        {/*<Route exact path={PATHS.BLOGS_ID} component={blogsDetails}/>*/}\n    </Router>\n)\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}